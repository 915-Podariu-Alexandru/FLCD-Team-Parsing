Documentation for Parser Part 2

https://github.com/915-Podariu-Alexandru/FLCD-Team-Parsing/tree/main/Part%202

First Function
-> Has 2 components
private void computeFirstSets() {
        this.firstSets = new HashMap<>();
        boolean changes;

        //Initialize First sets for Terminals
        for (String terminal : this.terminals)
            this.firstSets.put(terminal, new HashSet<>(Collections.singletonList(terminal)));

        //Initialize First sets for Non-Terminals
        for (String nonTerminal : this.nonTerminals)
            this.firstSets.put(nonTerminal, new HashSet<>());

        do
        {
            changes = false;
            //Iterate through each Production
            for (Map.Entry<List<String>, Set<List<String>>> entry : this.productions.entrySet())
            {
                List<String> leftHandSide = entry.getKey();
                Set<List<String>> rightHandSides = entry.getValue();

                //Iterate through each right-hand-side of the Production
                for (List<String> rightHandSide : rightHandSides)
                {
                    int i = 0;

                    //For each symbol
                    while (i < rightHandSide.size()) {
                        String symbol = rightHandSide.get(i);

                        // If the Symbol is a non-terminal, add its First set to the current non-terminal's First set
                        if (this.nonTerminals.contains(symbol))
                        {
                            Set<String> firstSetOfSymbol = this.firstSets.get(symbol);
                            Set<String> firstSetOfNonTerminal = this.firstSets.get(leftHandSide.get(0));

                            if (firstSetOfNonTerminal.addAll(firstSetOfSymbol))
                                changes = true;

                            // If EPSILON is not in the First set of the symbol, then stop
                            if (!firstSetOfSymbol.contains(this.EPSILON))
                                break;

                        }
                        // If the Symbol is a terminal, then add it to the current non-terminal's First set
                        else if (this.terminals.contains(symbol)) {
                            Set<String> firstSetOfNonTerminal = this.firstSets.get(leftHandSide.get(0));

                            if (firstSetOfNonTerminal.add(symbol))
                                changes = true;

                            break;
                        }
                        //If the Symbol is Epsilon, then add it to the current non-terminal's First set
                        else
                        {
                            Set<String> firstSetOfNonTerminal = this.firstSets.get(leftHandSide.get(0));

                            if (firstSetOfNonTerminal.add(this.EPSILON))
                                changes = true;

                            i++;
                        }
                    }

                    // If the whole right-hand side can derive Epsilon, then add Epsilon to the First set of the non-terminal
                    if (i == rightHandSide.size())
                    {
                        Set<String> firstSetOfNonTerminal = this.firstSets.get(leftHandSide.get(0));

                        if (firstSetOfNonTerminal.add(this.EPSILON))
                            changes = true;
                    }
                }
            }
        }
        while (changes);

    }

    Function returns the First set for a Given Symbol

     public Set<String> getFirstForSymbol(String symbol) {
            Set<String> firstSet = new HashSet<>();

            if (terminals.contains(symbol))
                firstSet.add(symbol);

            else if (nonTerminals.contains(symbol))
            {
                Set<String> symbolFirstSet = getFirst(symbol);
                firstSet.addAll(symbolFirstSet);
            }

            return firstSet;
        }

    Follow Function:

    Function returns the Follow set for a Given Symbol

        public Set<String> getFollowForSymbol(String symbol) {
            Set<String> symbolFollowSet = new HashSet<>();

            if (symbol.equals(startingSymbol)){
                symbolFollowSet.add("$");
            }
            if (nonTerminals.contains(symbol)){

                for (var lhs : this.productions.keySet()){
                    var rhs = this.productions.get(lhs).stream().toList();
                    var rhsString = this.productions.get(lhs).toString();

                    if (rhsString.contains(symbol)){
                        for (var RHPart : rhs) {
                            for (var i = 0; i < RHPart.size()-1; i++) {
                                //If symbol is followed by something,
                                //we add FIRST of the following element in rhs, except for epsilon.
                                //If the first contains epsilon, we also add FOLLOW (lhs) to it
                                if (RHPart.get(i).equals(symbol)) {
                                    var firstOfNextElement = getFirstForSymbol(RHPart.get(i + 1));
                                    for (var elem : firstOfNextElement){
                                        if (!Objects.equals(elem, EPSILON))
                                            symbolFollowSet.add(elem);
                                    }
                                    if (firstOfNextElement.contains(EPSILON) && !lhs.contains(symbol)){
                                        var followOfLHS = getFollowForSymbol(lhs.get(0));
                                        symbolFollowSet.addAll(followOfLHS);
                                    }
                                }
                            }
                            //if symbol is last in rhs, we call follow(lhs)
                            if (RHPart.get(RHPart.size()-1).equals(symbol) && !lhs.contains(symbol)){
                                var followOfLHS = getFollowForSymbol(lhs.get(0));
                                symbolFollowSet.addAll(followOfLHS);
                            }
                        }

                    }
                }
            }

            return symbolFollowSet;
        }


Tests on file g3.txt

S@A@B@C@D
a@b@c
S
S->a A|a C
A->A B
B->b
C->a C|C D
D->EPS

public class Tests {
    Grammar grammar = new Grammar("io/g3.txt");

    public void runTests()
    {
        //For Non-Terminal A
        if ((!grammar.getFirstForSymbol("A").toString().equals("[]")))
            throw new AssertionError();
        if ((!grammar.getFollowForSymbol("A").toString().equals("[b, $]")))
            throw new AssertionError();

        //For Non-Terminal B
        if ((!grammar.getFirstForSymbol("B").toString().equals("[b]")))
            throw new AssertionError();
        if ((!grammar.getFollowForSymbol("B").toString().equals("[b, $]")))
            throw new AssertionError();

        //For Non-Terminal C
        if ((!grammar.getFirstForSymbol("C").toString().equals("[a]")))
            throw new AssertionError();
        if ((!grammar.getFollowForSymbol("C").toString().equals("[$]")))
            throw new AssertionError();

        //For Non-Terminal D
        if ((!grammar.getFirstForSymbol("D").toString().equals("[EPS]")))
            throw new AssertionError();
        if ((!grammar.getFollowForSymbol("D").toString().equals("[$]")))
            throw new AssertionError();

        //For Non-Terminal S
        if ((!grammar.getFirstForSymbol("S").toString().equals("[a]")))
            throw new AssertionError();
        if ((!grammar.getFollowForSymbol("S").toString().equals("[$]")))
            throw new AssertionError();
    }

}
